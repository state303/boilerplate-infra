#---------------------------------------------------------------
# GLOBAL
#---------------------------------------------------------------
# generated 2025-04-26, Mozilla Guideline v5.7, HAProxy 3.2, OpenSSL 3.4.0, intermediate config
# https://ssl-config.mozilla.org/#server=haproxy&version=3.2&config=intermediate&openssl=3.4.0&guideline=5.7
global
    # intermediate configuration
    ssl-default-bind-curves X25519:prime256v1:secp384r1
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers ssl-min-ver TLSv1.2 no-tls-tickets

    ssl-default-server-curves X25519:prime256v1:secp384r1
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    ssl-dh-param-file /usr/local/etc/haproxy/ffdhe2048.txt
    # HSTS (63072000 seconds)
    # http-response set-header Strict-Transport-Security max-age=63072000

    # see https://www.haproxy.com/documentation/haproxy-configuration-tutorials/security/ssl-tls/client-side-encryption/
    nbthread 4
    cpu-map auto:1/1-4 0-3

#---------------------------------------------------------------
# DEFAULT
#---------------------------------------------------------------
defaults
        log             global
        option          dontlognull
        retries         3
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        maxconn         10000

        errorfile 400 /usr/local/etc/haproxy/errors/400.http
        errorfile 403 /usr/local/etc/haproxy/errors/403.http
        errorfile 408 /usr/local/etc/haproxy/errors/408.http
        errorfile 500 /usr/local/etc/haproxy/errors/500.http
        errorfile 502 /usr/local/etc/haproxy/errors/502.http
        errorfile 503 /usr/local/etc/haproxy/errors/503.http
        errorfile 504 /usr/local/etc/haproxy/errors/504.http

#---------------------------------------------------------------
# TABLES
#---------------------------------------------------------------
backend abuse
	stick-table type ip size 100k expire 5s store conn_rate(3s),http_req_rate(3s),http_err_rate(3s)

#---------------------------------------------------------------
# FRONTEND
#---------------------------------------------------------------

# for metrics..
# see https://www.haproxy.com/blog/haproxy-exposes-a-prometheus-metrics-endpoint/
frontend stats
   bind :8405
   mode http
   http-request use-service prometheus-exporter if { path /metrics }
   no log   

# TCP 443
frontend tcp_in
        mode tcp
        bind *:80
        bind *:443
        option  dontlognull
    
        acl clienthello req_ssl_hello_type 1
       
	# give some time to resolve request (if you would like to use SSL beyond this proxy)
        # and accept client hello first
        tcp-request inspect-delay 5s
        tcp-request content accept if clienthello

	
        # use_backend be_there if { req_ssl_sni -i somewhere.domain.com }
        # use_backend be_there if { req_ssl_sni -m end somewhere.domain.com }
        default_backend tcp_to_https

# TCP 8443
frontend http_in
        mode http
#       bind *:8443 ssl crt /etc/haproxy/certs/certificate.pem alpn h2,http/1.1
        bind *:8443 alpn h2,http/1.1

	tcp-request connection accept if { src -f /usr/local/etc/haproxy/whitelist.lst }
	http-request track-sc0 src table abuse

	acl rr_abuse	sc0_http_req_rate gt 50
	acl cr_abuse    sc0_conn_rate gt 20
	acl er_abuse	sc0_http_err_rate gt 10


        # allow whitelist
	http-request deny if cr_abuse er_abuse 

        # use_backend nginx if hdr(host) -i proxy.dsub.io
	# redirect scheme https if !{ ssl_fc }
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        http-request set-header X-Forwarded-Proto http if !{ ssl_fc }

        # force redirect scheme with permanent(301)
        redirect scheme https code 301 if !{ ssl_fc }
       	

	use_backend be_429 if rr_abuse

        default_backend nginx

#---------------------------------------------------------------
# BACKEND
#---------------------------------------------------------------

# Route to HTTP termination
backend tcp_to_https
        mode tcp
        server default 127.0.0.1:8443

# Not Matched
backend nomatch
        mode http
        http-request deny deny_status 400

backend nginx
	mode http
	server default 127.0.0.1:8080

# Rate Limit Exceeded
backend be_429
        mode http
        errorfile 429 /usr/local/etc/haproxy/errors/429.http
